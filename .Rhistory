legend("bottom", col=1:2, lty=1,
legend='Alpargatas',
lwd = 2, cex=0.6, box.lty=2)
betas
betas = matrix(NA, out, 2)
for (t in 1:out){
alpa_fit2 = lm(alpa_CAPM[t:(init+t)] ~ mercado_CAPM[t:(init+t)])
betas[t,]= alpa_fit2$coefficients[2]
}
betas
class(betas)
for (t in 1:out){
alpa_fit2 = lm(alpa_CAPM[t:(init+t)] ~ mercado_CAPM[t:(init+t)])
betas[t]= alpa_fit2$coefficients[2]
}
ts.plot(betas, col=2, lwd=2, ylim=c(0.95,1.25), main='Rolling Betas')
abline(h=alpa_fit$coefficients[2], col=2, lty=2)
abline(h=1, col='gray', lty=1)
legend("bottom", col=1:2, lty=1,
legend='Alpargatas',
lwd = 2, cex=0.6, box.lty=2)
betas
View(betas)
betas = matrix(NA, out, 2)
betas = matrix(NA, out, 1)
View(betas)
?matrix
betas = matrix(NA, out, 1)
for (t in 1:out){
alpa_fit2 = lm(alpa_CAPM[t:(init+t)] ~ mercado_CAPM[t:(init+t)])
betas[t]= alpa_fit2$coefficients[2]
}
betas = matrix(NA, out, 1)
for (t in 1:out){
alpa_fit2 = lm(alpa_CAPM[t:(init+t)] ~ mercado_CAPM[t:(init+t)])
betas[t]= alpa_fit2$coefficients[2]
}
betas
ts.plot(betas, col=1, lwd=2, ylim=c(0.95,1.25), main='Rolling Betas')
?ts.plot
ts.plot(betas, col=1, lwd=2, ylim=c(0.95,1.25), main='Rolling Betas')
ts.plot(betas, col=1, lwd=2, ylim=c(0.95,1.25), main='Rolling Betas')
abline(h=alpa_fit$coefficients[2], col=2, lty=2)
abline(h=1, col='gray', lty=1)
legend("bottom", col=1:2, lty=1,
legend='Alpargatas',
lwd = 2, cex=0.6, box.lty=2)
alpa_fit$coefficients[2]
?abline
ts.plot(betas, lwd=2, ylim=c(0.95,1.25), main='Rolling Betas')
ts.plot(betas, col=1, lwd=2, ylim=c(0.95,1.25), main='Rolling Betas')
betas
ts.plot(betas, col=1, lwd=2, ylim=c(0.0,1.25), main='Rolling Betas')
ts.plot(betas, col=1, lwd=2, ylim=c(0.3,0.8), main='Rolling Betas')
ts.plot(betas, col=1, lwd=2, ylim=c(0.4,0.8), main='Rolling Betas')
ts.plot(betas, col=1, lwd=2, ylim=c(0.4,0.8), main='Rolling Betas')
?abline(h=alpa_fit$coefficients[2], col=2, lty=2)
ts.plot(betas, col=1, lwd=2, ylim=c(0.4,0.8), main='Rolling Betas')
abline(h=alpa_fit$coefficients[2], col=2, lty=2)
abline(h=1, col='gray', lty=1)
legend("bottom", col=1:2, lty=1,
legend='Alpargatas',
lwd = 2, cex=0.6, box.lty=2)
init
out
ts.plot(betas, col=1, lwd=2, ylim=c(0.4,0.8), main='Rolling Betas')
abline(h=alpa_fit$coefficients[2], col=2, lty=2)
abline(h=1, col='gray', lty=1)
legend("bottom", col=1:2, lty=1,
legend='Alpargatas',
lwd = 2, cex=0.6, box.lty=2)
# Expand window
init = round(nrow(mercado_CAPM)/5, 0)
out = nrow(mercado_CAPM) - init
betas = matrix(NA, out, 1)
for (t in 1:out){
alpa_fit2 = lm(alpa_CAPM[1:(init+t)] ~ mercado_CAPM[1:(init+t)])
betas[t]= alpa_fit2$coefficients[2]
}
ts.plot(betas, col=1, lwd=2, ylim=c(0.4,0.8), main='Rolling Betas')
abline(h=alpa_fit$coefficients[2], col=2, lty=2)
abline(h=1, col='gray', lty=1)
legend("bottom", col=1:2, lty=1,
legend='Alpargatas',
lwd = 2, cex=0.6, box.lty=2)
auto.arima(alpa_CAPM, trace = TRUE, ic="aic",stepwise = FALSE) # ARMA(3,0,2) melhor modelo pelo criterio aic
fit = list()
specs = list()
AICs = matrix(NA, 64, 5)
colnames(AICs) = c('Arch-Order', 'Garch-Order','Model', 'Distr.', 'BIC')
rownames(AICs) = paste("Modelo", 1:64, sep = " ")
dist = c('norm', 'std')
model = c('sGARCH', 'eGARCH')
k = 1
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l])
fit[[k]] = ugarchfit(specs[[k]], data = alpa_CAPM)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
spec <- auto.arima(alpa_CAPM, trace = TRUE, ic="aic",stepwise = FALSE) # ARMA(1,0,1) melhor modelo pelo criterio aic
fit = list()
specs = list()
AICs = matrix(NA, 64, 5)
colnames(AICs) = c('Arch-Order', 'Garch-Order','Model', 'Distr.', 'BIC')
rownames(AICs) = paste("Modelo", 1:64, sep = " ")
dist = c('norm', 'std')
model = c('sGARCH', 'eGARCH')
k = 1
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l])
fit[[k]] = ugarchfit(specs[[k]], data = alpa_CAPM)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
best <- which(AICs[,5] == max(AICs[,5]), arr.ind = TRUE)
best
View(AICs)
alpa_CAPM
alpa_CAPM.which[V1 is NULL]
alpa_CAPM.which[V1 == NULL]
alpa_CAPM[is.nan(alpa_CAPM)]
View(alpa_CAPM)
is.nan(alpa_CAPM)
alpa_CAPM[is.nan(alpa_CAPM)]
alpa_CAPM[!is.nan(alpa_CAPM)]
k = 1
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(i,j,l,m)
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l])
fit[[k]] = ugarchfit(specs[[k]], data = alpa_CAPM)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
print(1)
print(1,2)
print(1,2,3)
?print
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l])
fit[[k]] = ugarchfit(specs[[k]], data = alpa_CAPM)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l])
fit[[k]] = ugarchfit(specs[[k]], data = alpa)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
best <- which(AICs[,5] == max(AICs[,5]), arr.ind = TRUE)
best
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l], solver.control = list(tol = 1e-12))
fit[[k]] = ugarchfit(specs[[k]], data = alpa_CAPM)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
fit[[k]] = ugarchfit(specs[[k]], data = alp)
fit[[k]] = ugarchfit(specs[[k]], data = alpa)
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l], solver.control = list(tol = 1e-12))
fit[[k]] = ugarchfit(specs[[k]], data = alpa)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l], solver.control = list(tol = 1e-6))
fit[[k]] = ugarchfit(specs[[k]], data = alpa)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l], solver.control = list(tol = 1e-2))
fit[[k]] = ugarchfit(specs[[k]], data = alpa)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l], solver.control = list(tol = 1e-50))
fit[[k]] = ugarchfit(specs[[k]], data = alpa)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l], solver = 'hybrid')
fit[[k]] = ugarchfit(specs[[k]], data = alpa)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l], solver = 'hybrid')
fit[[k]] = ugarchfit(specs[[k]], data = alpa_CAPM)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),include.mean = TRUE,
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l], solver = 'hybrid')
fit[[k]] = ugarchfit(specs[[k]], data = alpa_CAPM)
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
for (i in 1:4){
for (j in 1:4){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l])
fit[[k]] = ugarchfit(specs[[k]], data = alpa_CAPM, solver = 'hybrid')
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
for (i in 1:3){
for (j in 1:3){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l])
fit[[k]] = ugarchfit(specs[[k]], data = alpa_CAPM, solver = 'hybrid')
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
AICs = matrix(NA, 36, 5)
colnames(AICs) = c('Arch-Order', 'Garch-Order','Model', 'Distr.', 'BIC')
rownames(AICs) = paste("Modelo", 1:64, sep = " ")
dist = c('norm', 'std')
model = c('sGARCH', 'eGARCH')
k = 1
for (i in 1:3){
for (j in 1:3){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l])
fit[[k]] = ugarchfit(specs[[k]], data = alpa_CAPM, solver = 'hybrid')
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
best <- which(AICs[,5] == max(AICs[,5]), arr.ind = TRUE)
best
AICs[best,]
for (i in 1:3){
for (j in 1:3){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l])
fit[[k]] = ugarchfit(specs[[k]], data = mercado_CAPM, solver = 'hybrid')
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
AICs = matrix(NA, 16, 5)
k = 1
for (i in 1:2){
for (j in 1:2){
for (l in 1:length(dist)){
for (m in 1:length(model)){
print(c(i,j,l,m))
specs[[k]] = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model=model[m], garchOrder=c(i,j)),
distribution.model = dist[l])
fit[[k]] = ugarchfit(specs[[k]], data = mercado_CAPM, solver = 'hybrid')
AICs[k,] = c(i,j, model[m], dist[l],  abs(round(infocriteria(fit[[k]])[1],3)))
k = k + 1
}
}
}
}
best <- which(AICs[,5] == max(AICs[,5]), arr.ind = TRUE)
AICs[best,]
spec <- ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model="sGARCH", garchOrder=c(2,1)),
distribution.model = "norm")
garch_mercado = ugarchfit(spec, data = mercado_CAPM)
garch_mercado = ugarchfit(spec, data = mercado_CAPM)
temp2 = alpa_CAPM - mercado_CAPM
temp2 = alpa_CAPM - mercado_CAPM
temp1 = alpa_CAPM + mercado_CAPM
garch_mais = ugarchfit(spec, data = temp1)
garch_menos = ugarchfit(spec, data = temp2)
var_mercado = garch_mercado@fit$sigma^2
var_mais    = garch_mais@fit$sigma^2
var_menos   = garch_menos@fit$sigma^2
tvp_beta = (var_mais - var_menos)/(4*var_mercado)
ts.plot(tvp_beta, col=1, ylab='Alpargatas', main='Time-Varying Beta', lwd=1)
ts.plot(tvp_beta, col=1, ylab='Alpargatas', main='Time-Varying Beta', lwd=1)
abline(h=itau_fit$coefficients[2], lty=2, lwd=2, col=2)
fitted = rep(NA, nrow(itau))
fitted = rep(NA, nrow(alpa_CAPM))
erro = rep(NA, nrow(alpa_CAPM))
for (t in 1:nrow(alpa_CAPM)){
fitted[t] = tvp_beta[t]*mercado_CAPM[t]
erro[t]   = alpa_CAPM[t] - fitted[t]
}
MSE_beta_garch = mean(erro^2)
MAE_beta_garch = mean(abs(erro))
MAE_beta_garch/MAE_alpa_estatico
MSE_beta_garch/MAE_alpa_estatico
MAE_beta_garch/MAE_alpa_estatico
MSE_beta_garch/MAE_alpa_estatico
---
title: "Financial_Analytics - CAPM"
author: "Guilherme, Helena, Sérgio e Vinícius"
date: "11/19/2020"
output:
slidy_presentation:
# css: Slidy2\styles\slidy.css
# js: Slidy2\styles\slidy.css
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,
message = FALSE, options(scipen=999))
knitr::include_graphics("Rolling2.PNG")
# print("Expanding Window Example")
knitr::include_graphics("Expanding2.PNG")
source('funcoes_v2.R')
require(scales)
require(quantmod)
require(tidyverse)
require(ggplot2)
require(Amelia)
require(reshape2)
require(ggthemes)
require(plyr)
require(urca)
require(forecast)
require(tseries)
require("fGarch")
require("rugarch")
require(fDMA)
library(doParallel)
install.packages('doParallel')
library(doParallel)
library(xts)
library(BETS)
library(BETS)
library(tibbletime)
install.packages('tibbletime')
install.packages("tibbletime")
install.packages("tibbletime")
install.packages("tibbletime")
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,
message = FALSE, options(scipen=999))
library(tibbletime)
install.packages('tibble')
install.packages("tibble")
install.packages("tibble")
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,
message = FALSE, options(scipen=999))
library(tibbletime)
library(dplyr)
library(kableExtra)
install.packages("kableExtra")
library(kableExtra)
# Importando as ações
petr <- importa_retorno('PETR4.SA')
source('funcoes_v2.R')
require(scales)
require(quantmod)
source('funcoes_v2.R')
require(scales)
require(quantmod)
require(tidyverse)
require(ggplot2)
require(Amelia)
require(reshape2)
require(ggthemes)
require(plyr)
require(urca)
require(forecast)
require(tseries)
require("fGarch")
require("rugarch")
require(fDMA)
library(doParallel)
library(xts)
library(BETS)
library(tibbletime)
